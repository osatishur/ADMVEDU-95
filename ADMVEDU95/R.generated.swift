//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `cover1`.
    static let cover1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cover1")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cover1", bundle: ..., traitCollection: ...)`
    static func cover1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cover1, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 9 nibs.
  struct nib {
    /// Nib `AudioDetailView`.
    static let audioDetailView = _R.nib._AudioDetailView()
    /// Nib `CategoryViewController`.
    static let categoryViewController = _R.nib._CategoryViewController()
    /// Nib `CategoryView`.
    static let categoryView = _R.nib._CategoryView()
    /// Nib `HomeViewController`.
    static let homeViewController = _R.nib._HomeViewController()
    /// Nib `LoginViewController`.
    static let loginViewController = _R.nib._LoginViewController()
    /// Nib `ResetPasswordViewController`.
    static let resetPasswordViewController = _R.nib._ResetPasswordViewController()
    /// Nib `SearchTableViewCell`.
    static let searchTableViewCell = _R.nib._SearchTableViewCell()
    /// Nib `SignInViewController`.
    static let signInViewController = _R.nib._SignInViewController()
    /// Nib `VideoDetailView`.
    static let videoDetailView = _R.nib._VideoDetailView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AudioDetailView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.audioDetailView) instead")
    static func audioDetailView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.audioDetailView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryView) instead")
    static func categoryView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryViewController) instead")
    static func categoryViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeViewController) instead")
    static func homeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginViewController) instead")
    static func loginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResetPasswordViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resetPasswordViewController) instead")
    static func resetPasswordViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resetPasswordViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchTableViewCell) instead")
    static func searchTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SignInViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signInViewController) instead")
    static func signInViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signInViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoDetailView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoDetailView) instead")
    static func videoDetailView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoDetailView)
    }
    #endif

    static func audioDetailView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.audioDetailView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func categoryView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.categoryView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func categoryViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.categoryViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func homeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func resetPasswordViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.resetPasswordViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func searchTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchTableViewCell? {
      return R.nib.searchTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchTableViewCell
    }

    static func signInViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.signInViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func videoDetailView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoDetailView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SearchTableViewCell`.
    static let searchTableViewCell: Rswift.ReuseIdentifier<SearchTableViewCell> = Rswift.ReuseIdentifier(identifier: "SearchTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 53 localization keys.
    struct localizable {
      /// en translation: Account not found for the specified user. Please check and try again
      ///
      /// Locales: en, ru-RU
      static let authErrorCodeUserNotFoundText = Rswift.StringResource(key: "AuthErrorCode.UserNotFound.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Album: %@
      ///
      /// Locales: en, ru-RU
      static let detailAlbumName = Rswift.StringResource(key: "Detail.Album.Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Already have an account?  
      ///
      /// Locales: en, ru-RU
      static let signInBottomButtonTitle = Rswift.StringResource(key: "SignIn.bottomButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Artist: %@
      ///
      /// Locales: en, ru-RU
      static let detailArtistName = Rswift.StringResource(key: "Detail.Artist.Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Authorization
      ///
      /// Locales: en, ru-RU
      static let logInTopLabelText = Rswift.StringResource(key: "LogIn.TopLabel.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ru-RU
      static let alertCancelAction = Rswift.StringResource(key: "Alert.Cancel.Action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Check your email for the next step
      ///
      /// Locales: en, ru-RU
      static let resetPasswordSuccessAlertMessage = Rswift.StringResource(key: "ResetPassword.Success.AlertMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Director: %@
      ///
      /// Locales: en, ru-RU
      static let detailDirectorName = Rswift.StringResource(key: "Detail.Director.Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Don't have an account?  
      ///
      /// Locales: en, ru-RU
      static let logInBottomButtonTitle = Rswift.StringResource(key: "LogIn.BottomButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, ru-RU
      static let authEmailPlaceholder = Rswift.StringResource(key: "Auth.Email.Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, ru-RU
      static let alertErrorTitle = Rswift.StringResource(key: "Alert.Error.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Failed to get data from server
      ///
      /// Locales: en, ru-RU
      static let homeParsingDataErrorAlertMessage = Rswift.StringResource(key: "Home.ParsingDataError.AlertMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Failed to log out
      ///
      /// Locales: en, ru-RU
      static let homeLogOutFailedAlertMessage = Rswift.StringResource(key: "Home.LogOutFailed.AlertMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Forgot password
      ///
      /// Locales: en, ru-RU
      static let logInForgotPasswordButtonTitle = Rswift.StringResource(key: "LogIn.ForgotPasswordButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Log in
      ///
      /// Locales: en, ru-RU
      static let authLogInText = Rswift.StringResource(key: "Auth.LogIn.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, ru-RU
      static let homeLogoutButtonTitle = Rswift.StringResource(key: "Home.LogoutButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Movie: %@
      ///
      /// Locales: en, ru-RU
      static let detailMovieName = Rswift.StringResource(key: "Detail.Movie.Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Network error. Please try again.
      ///
      /// Locales: en, ru-RU
      static let authErrorCodeNetworkErrorText = Rswift.StringResource(key: "AuthErrorCode.NetworkError.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: No data
      ///
      /// Locales: en, ru-RU
      static let homeNoDataAlertTitle = Rswift.StringResource(key: "Home.NoData.AlertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, ru-RU
      static let alertOkTitle = Rswift.StringResource(key: "Alert.Ok.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, ru-RU
      static let authPasswordPlaceholder = Rswift.StringResource(key: "Auth.Password.Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Password recovery
      ///
      /// Locales: en, ru-RU
      static let resetPasswordNavigationItemTitle = Rswift.StringResource(key: "ResetPassword.NavigationItem.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Passwords don't match
      ///
      /// Locales: en, ru-RU
      static let signInPasswordsMatchErrorText = Rswift.StringResource(key: "SignIn.PasswordsMatchError.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Please enter a valid email
      ///
      /// Locales: en, ru-RU
      static let authErrorCodeInvalidEmailText = Rswift.StringResource(key: "AuthErrorCode.InvalidEmail.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Please, check for correct request
      ///
      /// Locales: en, ru-RU
      static let homeNoDataAlertMessage = Rswift.StringResource(key: "Home.NoData.AlertMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Please, enter your email
      ///
      /// Locales: en, ru-RU
      static let resetPasswordTopLabelText = Rswift.StringResource(key: "ResetPassword.TopLabel.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Registration
      ///
      /// Locales: en, ru-RU
      static let signInTopLabelText = Rswift.StringResource(key: "SignIn.TopLabel.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Repeat password
      ///
      /// Locales: en, ru-RU
      static let authRepeatPpasswordPlaceholder = Rswift.StringResource(key: "Auth.RepeatPpassword.Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Request delivered
      ///
      /// Locales: en, ru-RU
      static let resetPassworSuccessAlertTitle = Rswift.StringResource(key: "ResetPasswor.Success.AlertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Retry
      ///
      /// Locales: en, ru-RU
      static let alertRetryAction = Rswift.StringResource(key: "Alert.Retry.Action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, ru-RU
      static let homeNavigationItemTitle = Rswift.StringResource(key: "Home.NavigationItem.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, ru-RU
      static let resetPasswordSendButtonText = Rswift.StringResource(key: "ResetPassword.SendButton.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Sign in
      ///
      /// Locales: en, ru-RU
      static let authSignInText = Rswift.StringResource(key: "Auth.SignIn.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Song: %@
      ///
      /// Locales: en, ru-RU
      static let detailSongName = Rswift.StringResource(key: "Detail.Song.Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Start searching
      ///
      /// Locales: en, ru-RU
      static let homeSearchBarPlaceholder = Rswift.StringResource(key: "Home.SearchBar.Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: The email is already in use with another account
      ///
      /// Locales: en, ru-RU
      static let authErrorCodeEmailAlreadyInUseText = Rswift.StringResource(key: "AuthErrorCode.EmailAlreadyInUse.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: The password must be 6 characters long or more.
      ///
      /// Locales: en, ru-RU
      static let authErrorCodeWeakPasswordText = Rswift.StringResource(key: "AuthErrorCode.WeakPassword.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Unknown error
      ///
      /// Locales: en, ru-RU
      static let homeUnknownErrorAlertMessage = Rswift.StringResource(key: "Home.UnknownError.AlertMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Unknown error occurred
      ///
      /// Locales: en, ru-RU
      static let errorUnknownErrorText = Rswift.StringResource(key: "Error.UnknownError.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Your account has been disabled. Please contact support.
      ///
      /// Locales: en, ru-RU
      static let authErrorCodeUserDisabledText = Rswift.StringResource(key: "AuthErrorCode.UserDisabled.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Your password is incorrect. Please try again or use 'Forgot password'
      ///
      /// Locales: en, ru-RU
      static let authErrorCodeWrongPasswordText = Rswift.StringResource(key: "AuthErrorCode.WrongPassword.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: all
      ///
      /// Locales: en, ru-RU
      static let all = Rswift.StringResource(key: "all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: audiobook
      ///
      /// Locales: en, ru-RU
      static let audiobook = Rswift.StringResource(key: "audiobook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: ebook
      ///
      /// Locales: en, ru-RU
      static let ebook = Rswift.StringResource(key: "ebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: feature-movie
      ///
      /// Locales: en, ru-RU
      static let featureMovie = Rswift.StringResource(key: "feature-movie", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: movie
      ///
      /// Locales: en, ru-RU
      static let movie = Rswift.StringResource(key: "movie", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: music
      ///
      /// Locales: en, ru-RU
      static let music = Rswift.StringResource(key: "music", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: music-video
      ///
      /// Locales: en, ru-RU
      static let musicVideo = Rswift.StringResource(key: "music-video", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: music-video
      ///
      /// Locales: en, ru-RU
      static let musicVideoPlural = Rswift.StringResource(key: "musicVideoPlural", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: no info
      ///
      /// Locales: en, ru-RU
      static let noInfo = Rswift.StringResource(key: "no info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: podcast
      ///
      /// Locales: en, ru-RU
      static let podcast = Rswift.StringResource(key: "podcast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: song
      ///
      /// Locales: en, ru-RU
      static let song = Rswift.StringResource(key: "song", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: tvShow
      ///
      /// Locales: en, ru-RU
      static let tvShow = Rswift.StringResource(key: "tvShow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)

      /// en translation: Account not found for the specified user. Please check and try again
      ///
      /// Locales: en, ru-RU
      static func authErrorCodeUserNotFoundText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AuthErrorCode.UserNotFound.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AuthErrorCode.UserNotFound.Text"
        }

        return NSLocalizedString("AuthErrorCode.UserNotFound.Text", bundle: bundle, comment: "")
      }

      /// en translation: Album: %@
      ///
      /// Locales: en, ru-RU
      static func detailAlbumName(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Detail.Album.Name", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Album.Name"
        }

        let format = NSLocalizedString("Detail.Album.Name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Already have an account?  
      ///
      /// Locales: en, ru-RU
      static func signInBottomButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignIn.bottomButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SignIn.bottomButton.Title"
        }

        return NSLocalizedString("SignIn.bottomButton.Title", bundle: bundle, comment: "")
      }

      /// en translation: Artist: %@
      ///
      /// Locales: en, ru-RU
      static func detailArtistName(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Detail.Artist.Name", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Artist.Name"
        }

        let format = NSLocalizedString("Detail.Artist.Name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Authorization
      ///
      /// Locales: en, ru-RU
      static func logInTopLabelText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LogIn.TopLabel.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LogIn.TopLabel.Text"
        }

        return NSLocalizedString("LogIn.TopLabel.Text", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ru-RU
      static func alertCancelAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert.Cancel.Action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert.Cancel.Action"
        }

        return NSLocalizedString("Alert.Cancel.Action", bundle: bundle, comment: "")
      }

      /// en translation: Check your email for the next step
      ///
      /// Locales: en, ru-RU
      static func resetPasswordSuccessAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ResetPassword.Success.AlertMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ResetPassword.Success.AlertMessage"
        }

        return NSLocalizedString("ResetPassword.Success.AlertMessage", bundle: bundle, comment: "")
      }

      /// en translation: Director: %@
      ///
      /// Locales: en, ru-RU
      static func detailDirectorName(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Detail.Director.Name", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Director.Name"
        }

        let format = NSLocalizedString("Detail.Director.Name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Don't have an account?  
      ///
      /// Locales: en, ru-RU
      static func logInBottomButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LogIn.BottomButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LogIn.BottomButton.Title"
        }

        return NSLocalizedString("LogIn.BottomButton.Title", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, ru-RU
      static func authEmailPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.Email.Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.Email.Placeholder"
        }

        return NSLocalizedString("Auth.Email.Placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, ru-RU
      static func alertErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert.Error.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert.Error.Title"
        }

        return NSLocalizedString("Alert.Error.Title", bundle: bundle, comment: "")
      }

      /// en translation: Failed to get data from server
      ///
      /// Locales: en, ru-RU
      static func homeParsingDataErrorAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.ParsingDataError.AlertMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.ParsingDataError.AlertMessage"
        }

        return NSLocalizedString("Home.ParsingDataError.AlertMessage", bundle: bundle, comment: "")
      }

      /// en translation: Failed to log out
      ///
      /// Locales: en, ru-RU
      static func homeLogOutFailedAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.LogOutFailed.AlertMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.LogOutFailed.AlertMessage"
        }

        return NSLocalizedString("Home.LogOutFailed.AlertMessage", bundle: bundle, comment: "")
      }

      /// en translation: Forgot password
      ///
      /// Locales: en, ru-RU
      static func logInForgotPasswordButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LogIn.ForgotPasswordButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LogIn.ForgotPasswordButton.Title"
        }

        return NSLocalizedString("LogIn.ForgotPasswordButton.Title", bundle: bundle, comment: "")
      }

      /// en translation: Log in
      ///
      /// Locales: en, ru-RU
      static func authLogInText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.LogIn.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.LogIn.Text"
        }

        return NSLocalizedString("Auth.LogIn.Text", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, ru-RU
      static func homeLogoutButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.LogoutButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.LogoutButton.Title"
        }

        return NSLocalizedString("Home.LogoutButton.Title", bundle: bundle, comment: "")
      }

      /// en translation: Movie: %@
      ///
      /// Locales: en, ru-RU
      static func detailMovieName(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Detail.Movie.Name", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Movie.Name"
        }

        let format = NSLocalizedString("Detail.Movie.Name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Network error. Please try again.
      ///
      /// Locales: en, ru-RU
      static func authErrorCodeNetworkErrorText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AuthErrorCode.NetworkError.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AuthErrorCode.NetworkError.Text"
        }

        return NSLocalizedString("AuthErrorCode.NetworkError.Text", bundle: bundle, comment: "")
      }

      /// en translation: No data
      ///
      /// Locales: en, ru-RU
      static func homeNoDataAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.NoData.AlertTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.NoData.AlertTitle"
        }

        return NSLocalizedString("Home.NoData.AlertTitle", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, ru-RU
      static func alertOkTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert.Ok.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert.Ok.Title"
        }

        return NSLocalizedString("Alert.Ok.Title", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, ru-RU
      static func authPasswordPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.Password.Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.Password.Placeholder"
        }

        return NSLocalizedString("Auth.Password.Placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Password recovery
      ///
      /// Locales: en, ru-RU
      static func resetPasswordNavigationItemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ResetPassword.NavigationItem.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ResetPassword.NavigationItem.Title"
        }

        return NSLocalizedString("ResetPassword.NavigationItem.Title", bundle: bundle, comment: "")
      }

      /// en translation: Passwords don't match
      ///
      /// Locales: en, ru-RU
      static func signInPasswordsMatchErrorText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignIn.PasswordsMatchError.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SignIn.PasswordsMatchError.Text"
        }

        return NSLocalizedString("SignIn.PasswordsMatchError.Text", bundle: bundle, comment: "")
      }

      /// en translation: Please enter a valid email
      ///
      /// Locales: en, ru-RU
      static func authErrorCodeInvalidEmailText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AuthErrorCode.InvalidEmail.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AuthErrorCode.InvalidEmail.Text"
        }

        return NSLocalizedString("AuthErrorCode.InvalidEmail.Text", bundle: bundle, comment: "")
      }

      /// en translation: Please, check for correct request
      ///
      /// Locales: en, ru-RU
      static func homeNoDataAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.NoData.AlertMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.NoData.AlertMessage"
        }

        return NSLocalizedString("Home.NoData.AlertMessage", bundle: bundle, comment: "")
      }

      /// en translation: Please, enter your email
      ///
      /// Locales: en, ru-RU
      static func resetPasswordTopLabelText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ResetPassword.TopLabel.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ResetPassword.TopLabel.Text"
        }

        return NSLocalizedString("ResetPassword.TopLabel.Text", bundle: bundle, comment: "")
      }

      /// en translation: Registration
      ///
      /// Locales: en, ru-RU
      static func signInTopLabelText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SignIn.TopLabel.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SignIn.TopLabel.Text"
        }

        return NSLocalizedString("SignIn.TopLabel.Text", bundle: bundle, comment: "")
      }

      /// en translation: Repeat password
      ///
      /// Locales: en, ru-RU
      static func authRepeatPpasswordPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.RepeatPpassword.Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.RepeatPpassword.Placeholder"
        }

        return NSLocalizedString("Auth.RepeatPpassword.Placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Request delivered
      ///
      /// Locales: en, ru-RU
      static func resetPassworSuccessAlertTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ResetPasswor.Success.AlertTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ResetPasswor.Success.AlertTitle"
        }

        return NSLocalizedString("ResetPasswor.Success.AlertTitle", bundle: bundle, comment: "")
      }

      /// en translation: Retry
      ///
      /// Locales: en, ru-RU
      static func alertRetryAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert.Retry.Action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert.Retry.Action"
        }

        return NSLocalizedString("Alert.Retry.Action", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, ru-RU
      static func homeNavigationItemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.NavigationItem.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.NavigationItem.Title"
        }

        return NSLocalizedString("Home.NavigationItem.Title", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, ru-RU
      static func resetPasswordSendButtonText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ResetPassword.SendButton.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ResetPassword.SendButton.Text"
        }

        return NSLocalizedString("ResetPassword.SendButton.Text", bundle: bundle, comment: "")
      }

      /// en translation: Sign in
      ///
      /// Locales: en, ru-RU
      static func authSignInText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auth.SignIn.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auth.SignIn.Text"
        }

        return NSLocalizedString("Auth.SignIn.Text", bundle: bundle, comment: "")
      }

      /// en translation: Song: %@
      ///
      /// Locales: en, ru-RU
      static func detailSongName(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Detail.Song.Name", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail.Song.Name"
        }

        let format = NSLocalizedString("Detail.Song.Name", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Start searching
      ///
      /// Locales: en, ru-RU
      static func homeSearchBarPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.SearchBar.Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.SearchBar.Placeholder"
        }

        return NSLocalizedString("Home.SearchBar.Placeholder", bundle: bundle, comment: "")
      }

      /// en translation: The email is already in use with another account
      ///
      /// Locales: en, ru-RU
      static func authErrorCodeEmailAlreadyInUseText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AuthErrorCode.EmailAlreadyInUse.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AuthErrorCode.EmailAlreadyInUse.Text"
        }

        return NSLocalizedString("AuthErrorCode.EmailAlreadyInUse.Text", bundle: bundle, comment: "")
      }

      /// en translation: The password must be 6 characters long or more.
      ///
      /// Locales: en, ru-RU
      static func authErrorCodeWeakPasswordText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AuthErrorCode.WeakPassword.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AuthErrorCode.WeakPassword.Text"
        }

        return NSLocalizedString("AuthErrorCode.WeakPassword.Text", bundle: bundle, comment: "")
      }

      /// en translation: Unknown error
      ///
      /// Locales: en, ru-RU
      static func homeUnknownErrorAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.UnknownError.AlertMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.UnknownError.AlertMessage"
        }

        return NSLocalizedString("Home.UnknownError.AlertMessage", bundle: bundle, comment: "")
      }

      /// en translation: Unknown error occurred
      ///
      /// Locales: en, ru-RU
      static func errorUnknownErrorText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.UnknownError.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.UnknownError.Text"
        }

        return NSLocalizedString("Error.UnknownError.Text", bundle: bundle, comment: "")
      }

      /// en translation: Your account has been disabled. Please contact support.
      ///
      /// Locales: en, ru-RU
      static func authErrorCodeUserDisabledText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AuthErrorCode.UserDisabled.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AuthErrorCode.UserDisabled.Text"
        }

        return NSLocalizedString("AuthErrorCode.UserDisabled.Text", bundle: bundle, comment: "")
      }

      /// en translation: Your password is incorrect. Please try again or use 'Forgot password'
      ///
      /// Locales: en, ru-RU
      static func authErrorCodeWrongPasswordText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AuthErrorCode.WrongPassword.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "AuthErrorCode.WrongPassword.Text"
        }

        return NSLocalizedString("AuthErrorCode.WrongPassword.Text", bundle: bundle, comment: "")
      }

      /// en translation: all
      ///
      /// Locales: en, ru-RU
      static func all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "all"
        }

        return NSLocalizedString("all", bundle: bundle, comment: "")
      }

      /// en translation: audiobook
      ///
      /// Locales: en, ru-RU
      static func audiobook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("audiobook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "audiobook"
        }

        return NSLocalizedString("audiobook", bundle: bundle, comment: "")
      }

      /// en translation: ebook
      ///
      /// Locales: en, ru-RU
      static func ebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ebook"
        }

        return NSLocalizedString("ebook", bundle: bundle, comment: "")
      }

      /// en translation: feature-movie
      ///
      /// Locales: en, ru-RU
      static func featureMovie(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feature-movie", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feature-movie"
        }

        return NSLocalizedString("feature-movie", bundle: bundle, comment: "")
      }

      /// en translation: movie
      ///
      /// Locales: en, ru-RU
      static func movie(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("movie", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "movie"
        }

        return NSLocalizedString("movie", bundle: bundle, comment: "")
      }

      /// en translation: music
      ///
      /// Locales: en, ru-RU
      static func music(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("music", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "music"
        }

        return NSLocalizedString("music", bundle: bundle, comment: "")
      }

      /// en translation: music-video
      ///
      /// Locales: en, ru-RU
      static func musicVideo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("music-video", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "music-video"
        }

        return NSLocalizedString("music-video", bundle: bundle, comment: "")
      }

      /// en translation: music-video
      ///
      /// Locales: en, ru-RU
      static func musicVideoPlural(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("musicVideoPlural", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "musicVideoPlural"
        }

        return NSLocalizedString("musicVideoPlural", bundle: bundle, comment: "")
      }

      /// en translation: no info
      ///
      /// Locales: en, ru-RU
      static func noInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no info"
        }

        return NSLocalizedString("no info", bundle: bundle, comment: "")
      }

      /// en translation: podcast
      ///
      /// Locales: en, ru-RU
      static func podcast(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("podcast", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "podcast"
        }

        return NSLocalizedString("podcast", bundle: bundle, comment: "")
      }

      /// en translation: song
      ///
      /// Locales: en, ru-RU
      static func song(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("song", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "song"
        }

        return NSLocalizedString("song", bundle: bundle, comment: "")
      }

      /// en translation: tvShow
      ///
      /// Locales: en, ru-RU
      static func tvShow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tvShow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tvShow"
        }

        return NSLocalizedString("tvShow", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AudioDetailView.validate()
    }

    struct _AudioDetailView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AudioDetailView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "play.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'play.fill' is used in nib 'AudioDetailView', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CategoryView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CategoryViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HomeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LoginViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoginViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ResetPasswordViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ResetPasswordViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SearchTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchTableViewCell

      let bundle = R.hostingBundle
      let identifier = "SearchTableViewCell"
      let name = "SearchTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchTableViewCell
      }

      fileprivate init() {}
    }

    struct _SignInViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SignInViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _VideoDetailView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VideoDetailView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
